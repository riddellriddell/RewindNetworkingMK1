<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Sim" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>

using System.Collections;
using System.Collections.Generic;
using Sim;

namespace SimDataInterpolation
{
	//GENERATED CLASS DO NOT EDIT!!!!!

	public class InterpolatedFrameDataGen : IInterpolatedFrameData<FrameData>
	{
<# Type typFrameDataType = typeof(FrameData); 
		PropertyInfo [] prpPropertyInfo = typFrameDataType.GetProperties();
	
		FieldInfo [] fldFieldInfo = typFrameDataType.GetFields();
	
		foreach(FieldInfo fldField in fldFieldInfo)
	    {
			//try and get atttributes of target
			FrameDataInterpilationTypeAttribute fiaAttribute = fldField.GetCustomAttribute<FrameDataInterpilationTypeAttribute>();
	
			//check if this is to be interpolated / tracked
			if(fiaAttribute != null)
	        {
				Type typErrorType = typeof(float);

				//check if value is an integer value that will require a float offset 
				if(fiaAttribute.m_tType !=  typeof(long) && fiaAttribute.m_tType !=  typeof(int) && fiaAttribute.m_tType !=  typeof(short) && fiaAttribute.m_tType !=  typeof(byte))
                {
					typErrorType = fiaAttribute.m_tType;
                }

				bool bInterpolate = true;

				//check if an error is needed 
				if(fiaAttribute.m_itpInterpolation == FrameDataInterpilationTypeAttribute.InterpolationType.None)
                {
					bInterpolate = false;
                }

				string strTypeDef = fiaAttribute.m_tType.ToString();
				string strErrorTypeDef =  typErrorType.ToString();

				//check if it is an array or a list or just a plain value
				if( fldField.FieldType.IsArray)
	            {	 
					strTypeDef =  strTypeDef + "[]";
					strErrorTypeDef =  strErrorTypeDef + "[]";				
                }
				else if(typeof(ICollection).IsAssignableFrom(fldField.FieldType))
                {
					strTypeDef = "List<" + strTypeDef + ">";
					strErrorTypeDef = "List<" + strErrorTypeDef + ">";
                }


					//add list 
#>		public <#=strTypeDef#> <#= fldField.Name #>;
<#				if(bInterpolate)
				{#>																																									
		public <#= strErrorTypeDef #> <#= fldField.Name #>ErrorOffset; 

		public <#= strTypeDef #> <#= fldField.Name #>ErrorAdjusted;

<#				} 

	        }
	
	    }#>

		public void MatchFormat(FrameData fdaFrameData)
		{
<#
		foreach(FieldInfo fldField in fldFieldInfo)
	    {
			//try and get atttributes of target
			FrameDataInterpilationTypeAttribute fiaAttribute = fldField.GetCustomAttribute<FrameDataInterpilationTypeAttribute>();
	
			//check if this is to be interpolated / tracked
			if(fiaAttribute != null)
	        {
				Type typErrorType = typeof(float);

				//check if value is an integer value that will require a float offset 
				if(fiaAttribute.m_tType !=  typeof(long) && fiaAttribute.m_tType !=  typeof(int) && fiaAttribute.m_tType !=  typeof(short) && fiaAttribute.m_tType !=  typeof(byte))
                {
					typErrorType = fiaAttribute.m_tType;
                }

				bool bInterpolate = true;

				//check if an error is needed 
				if(fiaAttribute.m_itpInterpolation == FrameDataInterpilationTypeAttribute.InterpolationType.None)
                {
					bInterpolate = false;
                }

	
				string strTypeDef = fiaAttribute.m_tType.ToString();
				string strErrorTypeDef =  typErrorType.ToString();


				//check if it is an array or a list or just a plain value
				if( fldField.FieldType.IsArray)
	            {
#>			
			if(<#= fldField.Name #> == null || <#= fldField.Name #>.Length != fdaFrameData.<#=fldField.Name#>.Length)
			{
				<#= fldField.Name #> = new <#= strTypeDef#>[fdaFrameData.<#=fldField.Name#>.Length] ;

<#					if(bInterpolate)
					{#>																																									
				<#= fldField.Name #>ErrorOffset = new <#= strErrorTypeDef#>[fdaFrameData.<#=fldField.Name#>.Length] ;

				<#= fldField.Name #>ErrorAdjusted = new <#= strTypeDef#>[fdaFrameData.<#=fldField.Name#>.Length] ;
			
<#					}#>
			}

<#                }
				else if(typeof(ICollection).IsAssignableFrom(fldField.FieldType))
                {
#>			
			if(<#= fldField.Name #> == null || <#= fldField.Name #>.Count != fdaFrameData.<#=fldField.Name#>.Count)
			{
				<#= fldField.Name #>.Resize(FrameData.<#=fldField.Name#>.Count);

<#					if(bInterpolate)
					{#>																																									
				<#= fldField.Name #>ErrorOffset.Resize(fdaFrameData.<#=fldField.Name#>.Count);

				<#= fldField.Name #>ErrorAdjusted.Resize(fdaFrameData.<#=fldField.Name#>.Count);
			
<#					}#>
			}
<#                }
            }
		}#>
		}
	}
}