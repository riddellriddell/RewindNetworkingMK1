<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Sim" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>

using System.Collections;
using System.Collections.Generic;

namespace Sim
{
	public class InterpolatedFrameDataGen
	{
<# Type typFrameDataType = typeof(FrameData); 
		PropertyInfo [] prpPropertyInfo = typFrameDataType.GetProperties();
	
		FieldInfo [] fldFieldInfo = typFrameDataType.GetFields();
	
		foreach(FieldInfo fldField in fldFieldInfo)
	    {
			//try and get atttributes of target
			FrameDataInterpilationTypeAttribute fiaAttribute = fldField.GetCustomAttribute<FrameDataInterpilationTypeAttribute>();
	
			//check if this is to be interpolated / tracked
			if(fiaAttribute != null)
	        {
				Type typErrorType = typeof(float);

				//check if value is an integer value that will require a float offset 
				if(fiaAttribute.m_tType !=  typeof(long) && fiaAttribute.m_tType !=  typeof(int) && fiaAttribute.m_tType !=  typeof(short) && fiaAttribute.m_tType !=  typeof(byte))
                {
					typErrorType = fiaAttribute.m_tType;
                }

				//check if an error is needed 
				if(fiaAttribute.m_itpInterpolation == FrameDataInterpilationTypeAttribute.InterpolationType.None)
                {
					typErrorType = null;
                }
	
				//check if it is an array 
				if( typeof(IEnumerable ).IsAssignableFrom(fldField.FieldType) )
	            {
	
					//add list 
#>		public List<<#= fiaAttribute.m_tType.ToString() #>> <#= fldField.Name #>; 
				
<#					if(typErrorType != null)
					{#>																																									
		public List<<#= typErrorType.ToString() #>> <#= fldField.Name #>ErrorOffset; 

		public List<<#= fiaAttribute.m_tType.ToString() #>> <#= fldField.Name #>ErrorAdjusted;

<#
					} 
	            }
				else
	            {
#>		public <#= fiaAttribute.m_tType.ToString() #> <#= fldField.Name #>; 

<#					if(typErrorType != null)
					{#>
		public <#= typErrorType.ToString() #> <#= fldField.Name #>ErrorOffset; 

		public <#= fiaAttribute.m_tType.ToString() #> <#= fldField.Name #>ErrorAdjusted; 
<#
					}
	            }
	        }
	
	    }
		
		#>

		public int PlayerCount
        {
            get
            {
                return m_sPlayerHealths.Count;
            }
        }

		public InterpolatedFrameDataGen(int iPlayerCount)
		{
<# 
		foreach(FieldInfo fldField in fldFieldInfo)
	    {
			//try and get atttributes of target
			FrameDataInterpilationTypeAttribute fiaAttribute = fldField.GetCustomAttribute<FrameDataInterpilationTypeAttribute>();
	
			//check if this is to be interpolated / tracked
			if(fiaAttribute != null)
	        {
	
				Type typErrorType = typeof(float);

				//check if value is an integer value that will require a float offset 
				if(fiaAttribute.m_tType !=  typeof(long) && fiaAttribute.m_tType !=  typeof(int) && fiaAttribute.m_tType !=  typeof(short) && fiaAttribute.m_tType !=  typeof(byte))
                {
					typErrorType = fiaAttribute.m_tType;
                }

				//check if an error is needed 
				if(fiaAttribute.m_itpInterpolation == FrameDataInterpilationTypeAttribute.InterpolationType.None)
                {
					typErrorType = null;
                }

				//check if it is an array 
				if( typeof(IEnumerable ).IsAssignableFrom(fldField.FieldType) )
	            {	
					//add list 
#>			
			<#= fldField.Name #> = new List<<#= fiaAttribute.m_tType.ToString() #>>();  
<#					
					if(typErrorType != null)
					{#>
			<#= fldField.Name #>ErrorOffset = new List<<#= typErrorType.ToString() #>>(); 

			<#= fldField.Name #>ErrorAdjusted = new List<<#= fiaAttribute.m_tType.ToString() #>>(); 

<#					} #>
			for(int i = 0 ; i < iPlayerCount; i++)
			{
				<#= fldField.Name #>.Add(default(<#=fiaAttribute.m_tType.ToString()#>));
<#					
					if(typErrorType != null)
					{#>
				<#= fldField.Name #>ErrorOffset.Add(default(<#=typErrorType.ToString()#>));

				<#= fldField.Name #>ErrorAdjusted.Add(default(<#=fiaAttribute.m_tType.ToString()#>));
<#					} #>
			}
<#
	            }
				else
	            {
#>			
			<#= fldField.Name #> = default(<#=fiaAttribute.m_tType.ToString() #>); 
<#					
					if(typErrorType != null)
					{#>
			<#= fldField.Name #>ErrorOffset = default(<#=typErrorType.ToString()#>);

			<#= fldField.Name #>ErrorAdjusted = default(<#=fiaAttribute.m_tType.ToString()#>);
<#
					}
	            }
	        }
	
	    }
#>		}	
	}
}